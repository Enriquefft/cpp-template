# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-20.04, ubuntu-24.04, windows-latest]
        build_type: [Release]
        c_compiler: [gcc-13, clang-17, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-24.04
            c_compiler: gcc-13
            cpp_compiler: g++-13
          - os: ubuntu-24.04
            c_compiler: clang-17
            cpp_compiler: clang++-17
          - os: ubuntu-20.04
            c_compiler: clang-17
            cpp_compiler: clang++-17
          - os: ubuntu-20.04
            c_compiler: gcc-13
            cpp_compiler: g++-13
        exclude:
          - os: windows-latest
            c_compiler: gcc-13
          - os: windows-latest
            c_compiler: clang-17
          - os: ubuntu-20.04
            c_compiler: cl
          - os: ubuntu-24.04
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install clang-17 on ubuntu-20
        if: matrix.os == 'ubuntu-20.04' && matrix.c_compiler == 'clang-17'
        run: |
          # Avoid `Conflicts: python3-llgdb-x.y` between packages.
          # https://github.com/google/re2/blob/main/.github/workflows/ci.yml
          sudo apt-get purge -y python3-lldb-14
          wget https://apt.llvm.org/llvm.sh
          chmod u+x llvm.sh
          sudo ./llvm.sh 17

      # TODO: simplify the installation
      - name: Install gcc-13 on ubuntu-20
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get upgrade
          sudo apt install software-properties-common

          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get install gcc-13 g++-13

      - name: Run on Ubuntu only
        if: matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-24.04'
        run: |
          # Raylib
          sudo apt install libasound2-dev libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama-dev libwayland-dev libxkbcommon-dev

          # Crow
          sudo apt-get install libasio-dev


          sudo apt install iwyu

      - name: Setup vcpkg on Windows
        if: matrix.os == 'windows-latest'
        run: |
          VCPKG_DEFAULT_TRIPLET=x64-windows vcpkg install
        shell: bash

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          EXTRA_CMAKE_FLAGS=""
          if [ "$RUNNER_OS" == "Windows" ]; then
            EXTRA_CMAKE_FLAGS="-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake"
          fi

          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          ${EXTRA_CMAKE_FLAGS}
          -S ${{ github.workspace }}


      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}
